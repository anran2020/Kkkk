/**
 ******************************************************************************
 * 文件:ntp_tool.h
 * 作者:   zzx
 * 版本:   V0.01
 * 日期:     2014-12-01
 * 内容简介:
 *
 ******************************************************************************
 *  					文件历史
 *
 * 版本号-----  日期   -----   作者    ------   说明
 * v0.1                       2014-12-01          zzx                 创建该文件
 *
 *
 *
 ******************************************************************************
 **/

#ifndef  _NET_TOOL_H__
#define  _NET_TOOL_H__

//----------------------------------------------------------------------------
// 文件条件编译
//----------------------------------------------------------------------------
#include"tool_config.h"
#if (TOOL_ENABLE)

//----------------------------------------------------------------------------
//includes
//----------------------------------------------------------------------------
#include "mlos_ltimer.h"
#include "mlos_malloc.h"
#include "tool_idn.h"
#include "ntp_usocket.h"




//----------------------------------------------------------------------------
// define configs
//----------------------------------------------------------------------------


//工具协议任务优先级
#define TOOL_TASK_PRIO 		(TASK_PRIO_LOWEST)


//协议收发缓存大小
#define TOOL_TX_BUF_SIZE 		(2048)
#define TOOL_RX_BUF_SIZE 		(2048)


//tool 联机模式

#define TOOL_IAP_CONNECT 			0 		//iap 联机

#define TOOL_MCDEBUG_CONNECT 		1		//mc mlos 调试工具 联机



//----------------------------------------------------------------------------
//  工具传输协议状态
//----------------------------------------------------------------------------
enum ToolNtpState{

	e_tool_disconnect=0,


};

//----------------------------------------------------------------------------
//  工具，网络传输协议
//----------------------------------------------------------------------------
typedef struct {

	//状态
	mlu8 state;

	mlu16 curRemotePort;
	
	//协议链接套接字
	USockptr usock;

	//消息泵
	MsgPumpptr pMyMpump;

	//任务
	TaskPtr pMytask;


	
}ToolNetworkTransportProtocol,ToolNtp,*ToolNtpptr;


//----------------------------------------------------------------------------
//export vari
//----------------------------------------------------------------------------



//----------------------------------------------------------------------------
//export def fun
//----------------------------------------------------------------------------


//----------------------------------------------------------------------------
//export fun
//----------------------------------------------------------------------------

//工具传输协议初始化
void tool_init(void);


//工具的消息，消费者登记
void tool_consumer_register(ToolNtpMsgIDN idn, MsgCallbackFunction callback);

//获取发送缓冲区
mlu8* tool_txbuf_malloc(mlu16 len);
void tool_txbuf_free(mlu16 len);

//发送数据
int tool_tx_data(mlu8 cmd,mlu8 addr,mlu8*pdat,mlu16 datlen);

#else//文件条件编译
#define tool_init() 

//----------------------------------------------------------------------------
// end of file
//----------------------------------------------------------------------------
#endif
#endif

